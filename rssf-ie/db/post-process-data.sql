-- 1. Export team names to post-process with Google Refine

SELECT NAME,COUNTRY,ID,NAME NAME_DUP,COUNTRY COUNTRY_DUP 
FROM TEAM;

-- 2. Import stage name with transformed deduplicated team names, create an stage table and insert data 
drop table TEAM_DEDUP;

CREATE TABLE TEAM_DEDUP (
		NAME VARCHAR(50) NOT NULL,
		COUNTRY VARCHAR(3),
		ID_DUP INTEGER NOT NULL,
		NAME_DUP VARCHAR(50) NOT NULL,
		COUNTRY_DUP VARCHAR(3)
);

-- Insert data from team-dedup-insert.sql

-- 3. Create table with unique names and reindex 
CREATE TABLE TEAM_CLEAN (
		ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
		NAME VARCHAR(50) NOT NULL,
		COUNTRY VARCHAR(3),
		CONSTRAINT team_unique_pk PRIMARY KEY (ID),
		CONSTRAINT team_unique_uk UNIQUE(NAME,COUNTRY)
);
 
INSERT INTO TEAM_CLEAN(NAME,COUNTRY)
SELECT DISTINCT NAME,COUNTRY 
FROM TEAM_DEDUP;

 
CREATE TABLE TEAM_MAP (
	ID_NEW INTEGER NOT NULL,
	ID_OLD INTEGER NOT NULL,
	CONSTRAINT team_map_pk PRIMARY KEY (ID_NEW, ID_OLD),
	CONSTRAINT team_map_uk UNIQUE (ID_OLD)
)
	
	
INSERT INTO TEAM_MAP(ID_NEW, ID_OLD)
SELECT TEAM_CLEAN.ID, TEAM_DEDUP.ID_DUP
FROM TEAM_CLEAN, TEAM_DEDUP
WHERE TEAM_CLEAN.NAME = TEAM_DEDUP.NAME AND TEAM_CLEAN.COUNTRY = TEAM_DEDUP.COUNTRY;


-- 6. Reindex MATCH_PAIR to dedup data

DROP TABLE MATCH_PAIR_CLEAN;

CREATE TABLE MATCH_PAIR_CLEAN (
      id INTEGER NOT NULL,
      team1 INTEGER NOT NULL,
      team2 INTEGER NOT NULL,
      leg1_1 INTEGER NOT NULL,
      leg1_2 INTEGER NOT NULL,
      leg2_1 INTEGER NOT NULL,
      leg2_2 INTEGER NOT NULL,
      total1 INTEGER NOT NULL,
      total2 INTEGER NOT NULL,
      competition INTEGER NOT NULL,
      phase VARCHAR(50) NOT NULL,
      uri VARCHAR(80), 
      CONSTRAINT match_pair_clean_pk PRIMARY KEY (id),
      CONSTRAINT match_pair_clean_phase_fk FOREIGN KEY (competition,phase) REFERENCES PHASE(competition,name),
      CONSTRAINT match_pair_clean_team1_fk FOREIGN KEY (team1) REFERENCES TEAM_CLEAN(id),
      CONSTRAINT match_pair_clean_team2_fk FOREIGN KEY (team2) REFERENCES TEAM_CLEAN(id)
);


INSERT INTO MATCH_PAIR_CLEAN(id, team1, team2, leg1_1, leg1_2, leg2_1, leg2_2, total1, total2, competition, phase, uri)
SELECT MATCH_PAIR.ID, T1.ID_NEW, T2.ID_NEW, LEG1_1, LEG2_1, LEG2_1, LEG2_2, TOTAL1, TOTAL2, COMPETITION, PHASE, URI
FROM (MATCH_PAIR JOIN TEAM_MAP T1 ON MATCH_PAIR.TEAM1 = T1.ID_OLD)  
JOIN TEAM_MAP T2 ON MATCH_PAIR.TEAM2 = T2.ID_OLD

-- 7. Reindex MATCH_SINGLE to dedup data 

DROP TABLE MATCH_SINGLE_CLEAN;

CREATE TABLE MATCH_SINGLE_CLEAN (
    		id INTEGER NOT NULL,
       		team1 INTEGER NOT NULL,
       		team2 INTEGER NOT NULL,
       		result1 INTEGER NOT NULL,
       		result2 INTEGER NOT NULL,
       		mid1 INTEGER,
       		mid2 INTEGER,
       		competition INTEGER NOT NULL,
       		phase VARCHAR(50) NOT NULL,
       		uri VARCHAR(80), 
       		CONSTRAINT match_single_clean_pk PRIMARY KEY (id),
       		CONSTRAINT match_single_clean_phase_fk FOREIGN KEY (competition,phase) REFERENCES PHASE(competition,name),
       		CONSTRAINT match_single_clean_team1_fk FOREIGN KEY (team1) REFERENCES TEAM(id),
       		CONSTRAINT match_single_clean_team2_fk FOREIGN KEY (team2) REFERENCES TEAM(id)
);

INSERT INTO MATCH_SINGLE_CLEAN (id, team1, team2, result1, result2, mid1, mid2, competition, phase, uri)
SELECT M.ID, T1.ID_NEW, T2.ID_NEW, M.RESULT1, M.RESULT2, M.MID1, M.MID2, M.COMPETITION, M.PHASE, M.URI
FROM (MATCH_SINGLE M JOIN TEAM_MAP T1 ON M.TEAM1 = T1.ID_OLD)
JOIN TEAM_MAP T2 ON M.TEAM2 = T2.ID_OLD;

-- 8. Generate match_pair winners
DROP TABLE MATCH_PAIR_RESULTS;

CREATE TABLE MATCH_PAIR_RESULTS (
      id INTEGER NOT NULL,
      winner INTEGER NOT NULL
)

INSERT INTO MATCH_PAIR_RESULTS (ID, WINNER)
SELECT ID, 0
FROM MATCH_PAIR_CLEAN
WHERE TOTAL1 > TOTAL2
UNION ALL
SELECT ID, 1
FROM MATCH_PAIR_CLEAN
WHERE TOTAL1 < TOTAL2

-- Eliminatorias acabadas en empate
SELECT COUNT(*)
FROM MATCH_PAIR_CLEAN
WHERE TOTAL1 = TOTAL2


SELECT MA.ID, TEAM1, TEAM2, MA.COMPETITION, PHASE, NUM 
FROM MATCH_PAIR_CLEAN MA JOIN PHASE PA 
ON MA.COMPETITION = PA.COMPETITION
AND MA.PHASE = PA.NAME
WHERE TOTAL1 = TOTAL2


INSERT INTO MATCH_PAIR_RESULTS (ID, WINNER)
-- Eliminatorias empatadas que por partidos posteriores se deduce que ha ganado el equipo de casa
-- a partir de los datos de eliminatorias posteriores
SELECT DISTINCT E.id, 0
FROM (MATCH_PAIR_CLEAN E JOIN PHASE PE ON E.COMPETITION = PE.COMPETITION AND E.PHASE = PE.NAME), 
(MATCH_PAIR_CLEAN MA JOIN PHASE PA ON MA.COMPETITION = PA.COMPETITION AND MA.PHASE = PA.NAME)
WHERE E.TOTAL1 = E.TOTAL2
AND MA.COMPETITION = E.COMPETITION AND PA.NUM > PE.NUM
AND (MA.TEAM1 = E.TEAM1 OR MA.TEAM2 = E.TEAM1)
UNION 
-- Eliminatorias empatadas que por partidos posteriores se deduce que ha ganado el equipo de casa
-- a partir de partidos individuales
SELECT E.id, 0
FROM (MATCH_PAIR_CLEAN E JOIN PHASE PE ON E.COMPETITION = PE.COMPETITION AND E.PHASE = PE.NAME), 
(MATCH_SINGLE_CLEAN MA JOIN PHASE PA ON MA.COMPETITION = PA.COMPETITION AND MA.PHASE = PA.NAME)
WHERE E.TOTAL1 = E.TOTAL2
AND MA.COMPETITION = E.COMPETITION AND PA.NUM > PE.NUM
AND (MA.TEAM1 = E.TEAM1 OR MA.TEAM2 = E.TEAM1)
UNION 
-- Eliminatorias empatadas que por partidos posteriores se deduce que ha ganado el equipo de fuera
-- a partir de los datos de eliminatorias posteriores
SELECT DISTINCT E.id, 1 
FROM (MATCH_PAIR_CLEAN E JOIN PHASE PE ON E.COMPETITION = PE.COMPETITION AND E.PHASE = PE.NAME), 
(MATCH_PAIR_CLEAN MA JOIN PHASE PA ON MA.COMPETITION = PA.COMPETITION AND MA.PHASE = PA.NAME)
WHERE E.TOTAL1 = E.TOTAL2
AND MA.COMPETITION = E.COMPETITION AND PA.NUM > PE.NUM
AND (MA.TEAM1 = E.TEAM2 OR MA.TEAM2 = E.TEAM2)
UNION 
-- Eliminatorias empatadas que por partidos posteriores se deduce que ha ganado el equipo de fuera
-- a partir de partidos individuales
SELECT DISTINCT E.id, 1
FROM (MATCH_PAIR_CLEAN E JOIN PHASE PE ON E.COMPETITION = PE.COMPETITION AND E.PHASE = PE.NAME), 
(MATCH_SINGLE_CLEAN MA JOIN PHASE PA ON MA.COMPETITION = PA.COMPETITION AND MA.PHASE = PA.NAME)
WHERE E.TOTAL1 = E.TOTAL2
AND MA.COMPETITION = E.COMPETITION AND PA.NUM > PE.NUM
AND (MA.TEAM1 = E.TEAM2 OR MA.TEAM2 = E.TEAM2)

-- Show results 
SELECT ID, COUNT(*)
FROM MATCH_PAIR_RESULTS
GROUP BY ID
HAVING COUNT(*) > 1



-- 9. Calcular variables dicotómicas para los resultados
CALL SQLJ.REMOVE_JAR('APP.MyDerbyUtils', 0);
CALL SQLJ.INSTALL_JAR('/home/cdepablo/tmp/rssf/myDerbyUtils.jar', 'APP.MyDerbyUtils', 0);

CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.database.classpath', 'APP.MyDerbyUtils')


CREATE FUNCTION TO_INTEGER
( BOOLEANV BOOLEAN )
RETURNS INTEGER
PARAMETER STYLE JAVA
NO SQL LANGUAGE JAVA
EXTERNAL NAME 'com.seemla.rssf.db.Utils.toInt'

DROP TABLE TMP_HOME_RESULTS_MATRIX;

CREATE TABLE TMP_HOME_RESULTS_MATRIX (
 ID INTEGER NOT NULL,
 R0_0 INTEGER NOT NULL,
 R1_0 INTEGER NOT NULL,
 R2_0 INTEGER NOT NULL,
 R3_0 INTEGER NOT NULL,
 R4_0a INTEGER NOT NULL,
 R0_1 INTEGER NOT NULL,
 R0_2 INTEGER NOT NULL,
 R0_3 INTEGER NOT NULL,
 R0_4a INTEGER NOT NULL,
 R1_1 INTEGER NOT NULL,
 R2_2 INTEGER NOT NULL,
 R3_3A INTEGER NOT NULL,
 R2_1 INTEGER NOT NULL,
 R3_1 INTEGER NOT NULL,
 R4_1 INTEGER NOT NULL,
 R5_1a INTEGER NOT NULL,
 R3_2 INTEGER NOT NULL,
 R4_2 INTEGER NOT NULL,
 R5_2 INTEGER NOT NULL,
 R6_2a INTEGER NOT NULL,
 R4_3 INTEGER NOT NULL,
 R5_3 INTEGER NOT NULL,
 R6_3 INTEGER NOT NULL,
 R7_3a INTEGER NOT NULL,
 R1_2 INTEGER NOT NULL,
 R1_3 INTEGER NOT NULL,
 R1_4 INTEGER NOT NULL,
 R1_5a INTEGER NOT NULL,
 R2_3 INTEGER NOT NULL,
 R2_4 INTEGER NOT NULL,
 R2_5 INTEGER NOT NULL,
 R2_6a INTEGER NOT NULL,
 R3_4 INTEGER NOT NULL,
 R3_5 INTEGER NOT NULL,
 R3_6 INTEGER NOT NULL,
 R3_7 INTEGER NOT NULL,
 R4a_3a INTEGER NOT NULL,
 R3a_4a INTEGER NOT NULL
)


INSERT INTO TMP_HOME_RESULTS_MATRIX (
 ID,
 R0_0, R1_0, R2_0, R3_0, R4_0a, R0_1, R0_2, R0_3, R0_4a, 
 R1_1, R2_2, R3_3a, 
 R2_1, R3_1, R4_1, R5_1a,
 R3_2, R4_2, R5_2, R6_2a,
 R4_3, R5_3, R6_3, R7_3a,
 R1_2, R1_3, R1_4, R1_5a,
 R2_3, R2_4, R2_5, R2_6a,
 R3_4, R3_5, R3_6, R3_7,
 R4a_3a, R3a_4a
)
SELECT ID, 
TO_INTEGER(LEG1_1 = 0 AND LEG1_2 = 0) R0_0,
TO_INTEGER(LEG1_1 = 1 AND LEG1_2 = 0) R1_0,
TO_INTEGER(LEG1_1 = 2 AND LEG1_2 = 0) R2_0,
TO_INTEGER(LEG1_1 = 3 AND LEG1_2 = 0) R3_0,
TO_INTEGER(LEG1_1 > 3 AND LEG1_2 = 0) R4_0a,
TO_INTEGER(LEG1_1 = 0 AND LEG1_2 = 1) R0_1,
TO_INTEGER(LEG1_1 = 0 AND LEG1_2 = 2) R0_2,
TO_INTEGER(LEG1_1 = 0 AND LEG1_2 = 3) R0_3,
TO_INTEGER(LEG1_1 = 0 AND LEG1_2 > 3) R0_4a,
TO_INTEGER(LEG1_1 = 1 AND LEG1_2 = 1) R1_1,
TO_INTEGER(LEG1_1 = 2 AND LEG1_2 = 2) R2_2,
TO_INTEGER(LEG1_1 > 2 AND LEG1_2 > 2 AND LEG1_1 = LEG1_2) R3_3a,
TO_INTEGER(LEG1_1 = 2 AND LEG1_2 = 1) R2_1,
TO_INTEGER(LEG1_1 = 3 AND LEG1_2 = 1) R3_1,
TO_INTEGER(LEG1_1 = 4 AND LEG1_2 = 1) R4_1,
TO_INTEGER(LEG1_1 > 5 AND LEG1_2 = 1) R5_1a,
TO_INTEGER(LEG1_1 = 3 AND LEG1_2 = 2) R3_2,
TO_INTEGER(LEG1_1 = 4 AND LEG1_2 = 2) R4_2,
TO_INTEGER(LEG1_1 = 5 AND LEG1_2 = 2) R5_2,
TO_INTEGER(LEG1_1 > 5 AND LEG1_2 = 2) R6_2a,
TO_INTEGER(LEG1_1 = 4 AND LEG1_2 = 3) R4_3,
TO_INTEGER(LEG1_1 = 5 AND LEG1_2 = 3) R5_3,
TO_INTEGER(LEG1_1 = 6 AND LEG1_2 = 3) R6_3,
TO_INTEGER(LEG1_1 > 7 AND LEG1_2 = 3) R7_3a,
TO_INTEGER(LEG1_1 = 1 AND LEG1_2 = 2) R1_2,
TO_INTEGER(LEG1_1 = 1 AND LEG1_2 = 3) R1_3,
TO_INTEGER(LEG1_1 = 1 AND LEG1_2 = 4) R1_4,
TO_INTEGER(LEG1_1 = 1 AND LEG1_2 > 4) R1_5a,
TO_INTEGER(LEG1_1 = 2 AND LEG1_2 = 3) R2_3,
TO_INTEGER(LEG1_1 = 2 AND LEG1_2 = 4) R2_4,
TO_INTEGER(LEG1_1 = 2 AND LEG1_2 = 5) R2_5,
TO_INTEGER(LEG1_1 = 2 AND LEG1_2 > 5) R2_6a,
TO_INTEGER(LEG1_1 = 3 AND LEG1_2 = 4) R3_4,
TO_INTEGER(LEG1_1 = 3 AND LEG1_2 = 5) R3_5,
TO_INTEGER(LEG1_1 = 3 AND LEG1_2 = 6) R3_6,
TO_INTEGER(LEG1_1 = 3 AND LEG1_2 > 6) R3_7,
TO_INTEGER(LEG1_1 > LEG1_2 AND LEG1_2 > 3 ) R4a_3a,
TO_INTEGER(LEG1_1 < LEG1_2 AND LEG1_1 > 3 ) R3a_4a
FROM MATCH_PAIR_CLEAN M;



-- 9. Calcular el número de semifinales por pais
DROP TABLE COUNTRY_QUARTERFINALS;

CREATE TABLE COUNTRY_QUARTERFINALS (
	start INTEGER,
	country VARCHAR(50),
	num INTEGER
)

INSERT INTO COUNTRY_QUARTERFINALS(START, COUNTRY, NUM)
SELECT START, COUNTRY, COUNT(*) NUM 
FROM
(
SELECT START, T1.COUNTRY COUNTRY
FROM 
(MATCH_PAIR_CLEAN M JOIN COMPETITION ON COMPETITION.ID = M.COMPETITION)
JOIN TEAM_CLEAN T1 ON T1.ID = M.TEAM1
WHERE M.PHASE = 'Quarter-Finals'
UNION ALL
SELECT START, T2.COUNTRY COUNTRY
FROM 
(MATCH_PAIR_CLEAN M JOIN COMPETITION ON COMPETITION.ID = M.COMPETITION)
JOIN TEAM_CLEAN T2 ON T2.ID = M.TEAM2
WHERE M.PHASE = 'Quarter-Finals'
) AS SF
GROUP BY COUNTRY, START
ORDER BY START ASC,NUM DESC;



-- 11 CALCULAR POTENCIAL POR AÑO DE CADA PAIS EN BASE AL NÚMERO DE SEMIFINALES 

DROP TABLE COUNTRY_POTENTIAL;

CREATE TABLE COUNTRY_POTENTIAL (
	start INTEGER,
	country VARCHAR(50),
	num INTEGER
)

INSERT INTO COUNTRY_POTENTIAL (START, COUNTRY, NUM)
SELECT C.START, C.COUNTRY, COALESCE(CP.NUM,0) POTENTIAL
FROM COUNTRY_QUARTERFINALS CP RIGHT OUTER JOIN 
(
SELECT START, COUNTRY
FROM 
(SELECT DISTINCT START FROM COMPETITION) A, 
(SELECT DISTINCT COUNTRY FROM TEAM_CLEAN) B
ORDER BY START, COUNTRY
) C
ON CP.START = C.START AND CP.COUNTRY = C.COUNTRY;


DROP TABLE TMP_COUNTRY1_POTENTIAL;

CREATE TABLE TMP_COUNTRY1_POTENTIAL (
	ID INTEGER, 
	CP1_1 INTEGER,
	CP1_2 INTEGER,
	CP1_3 INTEGER,
	CP1_4 INTEGER,
	CP1_5 INTEGER
);

DROP TABLE TMP_COUNTRY2_POTENTIAL;

CREATE TABLE TMP_COUNTRY2_POTENTIAL (
	ID INTEGER, 
	CP2_1 INTEGER,
	CP2_2 INTEGER,
	CP2_3 INTEGER,
	CP2_4 INTEGER,
	CP2_5 INTEGER
);


INSERT INTO TMP_COUNTRY1_POTENTIAL( ID,CP1_1,CP1_2,CP1_3,CP1_4,CP1_5)
SELECT M.ID, CP_1.NUM CP1_1, CP_2.NUM CP1_2, CP_3.NUM CP1_3, CP_4.NUM CP1_4, CP_5.NUM CP1_5  
FROM MATCH_PAIR_CLEAN M JOIN TEAM_CLEAN T1 ON M.TEAM1 = T1.ID
JOIN COMPETITION C ON M.COMPETITION = C.ID 
JOIN COUNTRY_POTENTIAL CP_1 ON C.START -1 = CP_1.START  AND T1.COUNTRY = CP_1.COUNTRY
JOIN COUNTRY_POTENTIAL CP_2 ON C.START -2 = CP_2.START  AND T1.COUNTRY = CP_2.COUNTRY
JOIN COUNTRY_POTENTIAL CP_3 ON C.START -3 = CP_3.START  AND T1.COUNTRY = CP_3.COUNTRY
JOIN COUNTRY_POTENTIAL CP_4 ON C.START -4 = CP_4.START  AND T1.COUNTRY = CP_4.COUNTRY
JOIN COUNTRY_POTENTIAL CP_5 ON C.START -5 = CP_5.START  AND T1.COUNTRY = CP_5.COUNTRY


INSERT INTO TMP_COUNTRY2_POTENTIAL(ID,CP2_1,CP2_2,CP2_3,CP2_4,CP2_5)
SELECT M.ID, CP_1.NUM CP2_1, CP_2.NUM CP2_2, CP_3.NUM CP2_3, CP_4.NUM CP2_4, CP_5.NUM CP2_5  
FROM MATCH_PAIR_CLEAN M JOIN TEAM_CLEAN T2 ON M.TEAM2 = T2.ID
JOIN COMPETITION C ON M.COMPETITION = C.ID 
JOIN COUNTRY_POTENTIAL CP_1 ON C.START -1 = CP_1.START  AND T2.COUNTRY = CP_1.COUNTRY
JOIN COUNTRY_POTENTIAL CP_2 ON C.START -2 = CP_2.START  AND T2.COUNTRY = CP_2.COUNTRY
JOIN COUNTRY_POTENTIAL CP_3 ON C.START -3 = CP_3.START  AND T2.COUNTRY = CP_3.COUNTRY
JOIN COUNTRY_POTENTIAL CP_4 ON C.START -4 = CP_4.START  AND T2.COUNTRY = CP_4.COUNTRY
JOIN COUNTRY_POTENTIAL CP_5 ON C.START -5 = CP_5.START  AND T2.COUNTRY = CP_5.COUNTRY


-- 8. Generate quarter - finalist by season
DROP TABLE SEMIFINALIST;

CREATE TABLE SEMIFINALIST (
	START INTEGER NOT NULL,
    team INTEGER NOT NULL
)

INSERT INTO SEMIFINALIST(START, TEAM)
SELECT DISTINCT START, TEAM1 TEAM 
FROM MATCH_PAIR_CLEAN M JOIN COMPETITION C ON C.ID = M.COMPETITION
WHERE PHASE = 'Semi-Finals'
UNION
SELECT DISTINCT START, TEAM2 TEAM 
FROM MATCH_PAIR_CLEAN M JOIN COMPETITION C ON C.ID = M.COMPETITION
WHERE PHASE = 'Semi-Finals'
ORDER BY START, TEAM

DROP TABLE TMP_TEAM1_POTENTIAL;

CREATE TABLE TMP_TEAM1_POTENTIAL (
	ID INTEGER, 
	QF1_1 INTEGER,
	QF1_2 INTEGER,
	QF1_3 INTEGER,
	QF1_4 INTEGER,
	QF1_5 INTEGER
);

DROP TABLE TMP_TEAM2_POTENTIAL;

CREATE TABLE TMP_TEAM2_POTENTIAL (
	ID INTEGER, 
	QF2_1 INTEGER,
	QF2_2 INTEGER,
	QF2_3 INTEGER,
	QF2_4 INTEGER,
	QF2_5 INTEGER
);



INSERT INTO TMP_TEAM1_POTENTIAL (ID, QF1_1, QF1_2, QF1_3, QF1_4, QF1_5)
SELECT M.ID, COALESCE(QF_1.ISSF,0) QF1_1, COALESCE(QF_2.ISSF,0) QF1_2, COALESCE(QF_3.ISSF,0) QF1_3, COALESCE(QF_4.ISSF,0) QF1_4 , COALESCE(QF_5.ISSF,0) QF1_5    
FROM MATCH_PAIR_CLEAN M JOIN TEAM_CLEAN T1 ON M.TEAM1 = T1.ID
JOIN COMPETITION C ON M.COMPETITION = C.ID 
LEFT OUTER JOIN (SELECT START, TEAM, 1 ISSF FROM SEMIFINALIST) QF_1 ON QF_1.START = C.START - 1 AND QF_1.TEAM = T1.ID
LEFT OUTER JOIN (SELECT START, TEAM, 1 ISSF FROM SEMIFINALIST) QF_2 ON QF_2.START = C.START - 2 AND QF_2.TEAM = T1.ID
LEFT OUTER JOIN (SELECT START, TEAM, 1 ISSF FROM SEMIFINALIST) QF_3 ON QF_3.START = C.START - 3 AND QF_3.TEAM = T1.ID
LEFT OUTER JOIN (SELECT START, TEAM, 1 ISSF FROM SEMIFINALIST) QF_4 ON QF_4.START = C.START - 4 AND QF_4.TEAM = T1.ID
LEFT OUTER JOIN (SELECT START, TEAM, 1 ISSF FROM SEMIFINALIST) QF_5 ON QF_5.START = C.START - 5 AND QF_5.TEAM = T1.ID;


INSERT INTO TMP_TEAM2_POTENTIAL (ID, QF2_1, QF2_2, QF2_3, QF2_4, QF2_5)
SELECT M.ID, COALESCE(QF_1.ISSF,0) QF2_1, COALESCE(QF_2.ISSF,0) QF2_2, COALESCE(QF_3.ISSF,0) QF2_3, COALESCE(QF_4.ISSF,0) QF2_4 , COALESCE(QF_5.ISSF,0) QF2_5    
FROM MATCH_PAIR_CLEAN M JOIN TEAM_CLEAN T2 ON M.TEAM2 = T2.ID
JOIN COMPETITION C ON M.COMPETITION = C.ID 
LEFT OUTER JOIN (SELECT START, TEAM, 1 ISSF FROM SEMIFINALIST) QF_1 ON QF_1.START = C.START - 1 AND QF_1.TEAM = T2.ID
LEFT OUTER JOIN (SELECT START, TEAM, 1 ISSF FROM SEMIFINALIST) QF_2 ON QF_2.START = C.START - 2 AND QF_2.TEAM = T2.ID
LEFT OUTER JOIN (SELECT START, TEAM, 1 ISSF FROM SEMIFINALIST) QF_3 ON QF_3.START = C.START - 3 AND QF_3.TEAM = T2.ID
LEFT OUTER JOIN (SELECT START, TEAM, 1 ISSF FROM SEMIFINALIST) QF_4 ON QF_4.START = C.START - 4 AND QF_4.TEAM = T2.ID
LEFT OUTER JOIN (SELECT START, TEAM, 1 ISSF FROM SEMIFINALIST) QF_5 ON QF_5.START = C.START - 5 AND QF_5.TEAM = T2.ID

--11. Calculate number of phases to final
DROP TABLE TMP_PHASE;

CREATE TABLE TMP_PHASE (
	COMPETITION INTEGER,
	NAME VARCHAR(50),
	NPF INTEGER
);

INSERT INTO TMP_PHASE(COMPETITION, NAME, NPF)
SELECT COMPETITION, NAME, MAXPHASE - NUM NPF
FROM PHASE
NATURAL JOIN 
(SELECT COMPETITION, MAX(NUM) MAXPHASE 
FROM PHASE
GROUP BY COMPETITION) M





SELECT M.ID, T1.NAME, T1.COUNTRY, T2.NAME, T2.COUNTRY, C.NAME, C.SEASON, R.WINNER, P.NPF,
 R0_0, R1_0, R2_0, R3_0, R4_0a, R0_1, R0_2, R0_3, R0_4a, 
 R1_1, R2_2, R3_3a, 
 R2_1, R3_1, R4_1, R5_1a,
 R3_2, R4_2, R5_2, R6_2a,
 R4_3, R5_3, R6_3, R7_3a,
 R1_2, R1_3, R1_4, R1_5a,
 R2_3, R2_4, R2_5, R2_6a,
 R3_4, R3_5, R3_6, R3_7,
 R4a_3a, R3a_4a,
 CP1_1,CP1_2,CP1_3,CP1_4,CP1_5,
 CP2_1,CP2_2,CP2_3,CP2_4,CP2_5,
 QF1_1, QF1_2, QF1_3, QF1_4, QF1_5,
 QF2_1, QF2_2, QF2_3, QF2_4, QF2_5
FROM 
MATCH_PAIR_CLEAN M 
JOIN TEAM_CLEAN T1 ON M.TEAM1 = T1.ID   
JOIN TEAM_CLEAN T2 ON M.TEAM2 = T2.ID  
JOIN COMPETITION C ON M.COMPETITION = C.ID 
JOIN TMP_PHASE P ON M.COMPETITION = P.COMPETITION AND M.PHASE = P.NAME 
JOIN MATCH_PAIR_RESULTS R ON M.ID = R.ID
JOIN TMP_HOME_RESULTS_MATRIX H ON M.ID = H.ID
JOIN TMP_COUNTRY1_POTENTIAL CP1 ON M.ID = CP1.ID
JOIN TMP_COUNTRY2_POTENTIAL CP2 ON M.ID = CP2.ID
JOIN TMP_TEAM1_POTENTIAL TP1 ON M.ID = TP1.ID
JOIN TMP_TEAM2_POTENTIAL TP2 ON M.ID = TP2.ID




